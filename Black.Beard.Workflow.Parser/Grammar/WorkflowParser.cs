//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from WorkflowParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Workflow.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class WorkflowParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ACTION=1, AFTER=2, AND=3, BEFORE=4, CONST=5, DESCRIPTION=6, DAY=7, DEFINE=8, 
		EVENT=9, EXECUTE=10, ENTER=11, EQUAL=12, EXIT=13, FINAL=14, HOUR=15, INCLUDE=16, 
		INITIAL=17, MATCHING=18, MINUTE=19, NAME=20, NO=21, NOT=22, ON=23, OR=24, 
		PARAMETER=25, RULE=26, SWITCH=27, SEQUENCE=28, STATE=29, TIME=30, WAITING=31, 
		WITH=32, WHEN=33, CHAR_STRING=34, CHAR_COMMENT=35, LEFT_PAREN=36, RIGHT_PAREN=37, 
		SEMICOLON=38, COMMA=39, DOT=40, SPACES=41, NUMBER=42, SINGLE_LINE_COMMENT=43, 
		MULTI_LINE_COMMENT=44, REGULAR_ID=45;
	public const int
		RULE_script = 0, RULE_matchings = 1, RULE_matching = 2, RULE_unit_statement = 3, 
		RULE_define_statement = 4, RULE_constant = 5, RULE_value = 6, RULE_sequence_statement = 7, 
		RULE_state = 8, RULE_on_event_statement = 9, RULE_delay = 10, RULE_switch_state = 11, 
		RULE_execute = 12, RULE_execute2 = 13, RULE_actions = 14, RULE_action = 15, 
		RULE_arguments = 16, RULE_rule_condition = 17, RULE_action_statement = 18, 
		RULE_rule_statement = 19, RULE_event_statement = 20, RULE_number = 21, 
		RULE_key = 22, RULE_comment = 23, RULE_numeric = 24, RULE_numbers = 25, 
		RULE_string = 26;
	public static readonly string[] ruleNames = {
		"script", "matchings", "matching", "unit_statement", "define_statement", 
		"constant", "value", "sequence_statement", "state", "on_event_statement", 
		"delay", "switch_state", "execute", "execute2", "actions", "action", "arguments", 
		"rule_condition", "action_statement", "rule_statement", "event_statement", 
		"number", "key", "comment", "numeric", "numbers", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ACTION'", "'AFTER'", "'AND'", "'BEFORE'", "'CONST'", "'DESCRIPTION'", 
		"'DAY'", "'DEFINE'", "'EVENT'", "'EXECUTE'", "'ENTER'", "'='", "'EXIT'", 
		"'FINAL'", "'HOUR'", "'INCLUDE'", "'INITIAL'", "'MATCHING'", "'MINUTE'", 
		"'NAME'", "'NO'", "'NOT'", "'ON'", "'OR'", "'PARAMETER'", "'RULE'", "'SWITCH'", 
		"'SEQUENCE'", "'STATE'", "'TIME'", "'WAITING'", "'WITH'", "'WHEN'", null, 
		null, "'('", "')'", "';'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACTION", "AFTER", "AND", "BEFORE", "CONST", "DESCRIPTION", "DAY", 
		"DEFINE", "EVENT", "EXECUTE", "ENTER", "EQUAL", "EXIT", "FINAL", "HOUR", 
		"INCLUDE", "INITIAL", "MATCHING", "MINUTE", "NAME", "NO", "NOT", "ON", 
		"OR", "PARAMETER", "RULE", "SWITCH", "SEQUENCE", "STATE", "TIME", "WAITING", 
		"WITH", "WHEN", "CHAR_STRING", "CHAR_COMMENT", "LEFT_PAREN", "RIGHT_PAREN", 
		"SEMICOLON", "COMMA", "DOT", "SPACES", "NUMBER", "SINGLE_LINE_COMMENT", 
		"MULTI_LINE_COMMENT", "REGULAR_ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "WorkflowParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static WorkflowParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public WorkflowParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public WorkflowParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ScriptContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(WorkflowParser.NAME, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(WorkflowParser.Eof, 0); }
		public ITerminalNode DESCRIPTION() { return GetToken(WorkflowParser.DESCRIPTION, 0); }
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public ITerminalNode[] INCLUDE() { return GetTokens(WorkflowParser.INCLUDE); }
		public ITerminalNode INCLUDE(int i) {
			return GetToken(WorkflowParser.INCLUDE, i);
		}
		public ITerminalNode[] CHAR_STRING() { return GetTokens(WorkflowParser.CHAR_STRING); }
		public ITerminalNode CHAR_STRING(int i) {
			return GetToken(WorkflowParser.CHAR_STRING, i);
		}
		public ITerminalNode MATCHING() { return GetToken(WorkflowParser.MATCHING, 0); }
		public Unit_statementContext[] unit_statement() {
			return GetRuleContexts<Unit_statementContext>();
		}
		public Unit_statementContext unit_statement(int i) {
			return GetRuleContext<Unit_statementContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(WorkflowParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(WorkflowParser.SEMICOLON, i);
		}
		public MatchingsContext[] matchings() {
			return GetRuleContexts<MatchingsContext>();
		}
		public MatchingsContext matchings(int i) {
			return GetRuleContext<MatchingsContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(NAME);
			State = 55; key();
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DESCRIPTION) {
				{
				State = 56; Match(DESCRIPTION);
				State = 57; comment();
				}
			}

			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INCLUDE) {
				{
				{
				State = 60; Match(INCLUDE);
				State = 61; Match(CHAR_STRING);
				}
				}
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MATCHING) {
				{
				State = 67; Match(MATCHING);
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 68; matchings();
					}
					}
					State = 71;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LEFT_PAREN );
				}
			}

			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFINE) {
				{
				{
				State = 75; unit_statement();
				State = 76; Match(SEMICOLON);
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 83; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchingsContext : ParserRuleContext {
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(WorkflowParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(WorkflowParser.LEFT_PAREN, i);
		}
		public MatchingContext[] matching() {
			return GetRuleContexts<MatchingContext>();
		}
		public MatchingContext matching(int i) {
			return GetRuleContext<MatchingContext>(i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(WorkflowParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(WorkflowParser.RIGHT_PAREN, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(WorkflowParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(WorkflowParser.COMMA, i);
		}
		public MatchingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchings; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchingsContext matchings() {
		MatchingsContext _localctx = new MatchingsContext(Context, State);
		EnterRule(_localctx, 2, RULE_matchings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(LEFT_PAREN);
			State = 86; matching();
			State = 87; Match(RIGHT_PAREN);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 88; Match(COMMA);
				State = 89; Match(LEFT_PAREN);
				State = 90; matching();
				State = 91; Match(RIGHT_PAREN);
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchingContext : ParserRuleContext {
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(WorkflowParser.EQUAL, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(WorkflowParser.CHAR_STRING, 0); }
		public MatchingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matching; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatching(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchingContext matching() {
		MatchingContext _localctx = new MatchingContext(Context, State);
		EnterRule(_localctx, 4, RULE_matching);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; key();
			State = 99; Match(EQUAL);
			State = 100; Match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unit_statementContext : ParserRuleContext {
		public Define_statementContext define_statement() {
			return GetRuleContext<Define_statementContext>(0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnit_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unit_statementContext unit_statement() {
		Unit_statementContext _localctx = new Unit_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_unit_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; define_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_statementContext : ParserRuleContext {
		public ITerminalNode DEFINE() { return GetToken(WorkflowParser.DEFINE, 0); }
		public Event_statementContext event_statement() {
			return GetRuleContext<Event_statementContext>(0);
		}
		public Rule_statementContext rule_statement() {
			return GetRuleContext<Rule_statementContext>(0);
		}
		public Action_statementContext action_statement() {
			return GetRuleContext<Action_statementContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Sequence_statementContext sequence_statement() {
			return GetRuleContext<Sequence_statementContext>(0);
		}
		public Define_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Define_statementContext define_statement() {
		Define_statementContext _localctx = new Define_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_define_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(DEFINE);
			State = 110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENT:
			case NO:
				{
				State = 105; event_statement();
				}
				break;
			case RULE:
				{
				State = 106; rule_statement();
				}
				break;
			case ACTION:
				{
				State = 107; action_statement();
				}
				break;
			case CONST:
				{
				State = 108; constant();
				}
				break;
			case SEQUENCE:
				{
				State = 109; sequence_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(WorkflowParser.CONST, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 10, RULE_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(CONST);
			State = 113; key();
			State = 114; value();
			State = 115; comment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public NumbersContext numbers() {
			return GetRuleContext<NumbersContext>(0);
		}
		public DelayContext delay() {
			return GetRuleContext<DelayContext>(0);
		}
		public ITerminalNode REGULAR_ID() { return GetToken(WorkflowParser.REGULAR_ID, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_value);
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117; @string();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118; numbers();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119; delay();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 120; Match(REGULAR_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_statementContext : ParserRuleContext {
		public ITerminalNode SEQUENCE() { return GetToken(WorkflowParser.SEQUENCE, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public StateContext[] state() {
			return GetRuleContexts<StateContext>();
		}
		public StateContext state(int i) {
			return GetRuleContext<StateContext>(i);
		}
		public Sequence_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_statementContext sequence_statement() {
		Sequence_statementContext _localctx = new Sequence_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_sequence_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(SEQUENCE);
			State = 124; key();
			State = 125; comment();
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 126; state();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WITH );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(WorkflowParser.WITH, 0); }
		public ITerminalNode STATE() { return GetToken(WorkflowParser.STATE, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public ExecuteContext[] execute() {
			return GetRuleContexts<ExecuteContext>();
		}
		public ExecuteContext execute(int i) {
			return GetRuleContext<ExecuteContext>(i);
		}
		public On_event_statementContext[] on_event_statement() {
			return GetRuleContexts<On_event_statementContext>();
		}
		public On_event_statementContext on_event_statement(int i) {
			return GetRuleContext<On_event_statementContext>(i);
		}
		public ITerminalNode INITIAL() { return GetToken(WorkflowParser.INITIAL, 0); }
		public ITerminalNode FINAL() { return GetToken(WorkflowParser.FINAL, 0); }
		public StateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitState(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateContext state() {
		StateContext _localctx = new StateContext(Context, State);
		EnterRule(_localctx, 16, RULE_state);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(WITH);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL || _la==INITIAL) {
				{
				State = 132;
				_la = TokenStream.LA(1);
				if ( !(_la==FINAL || _la==INITIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 135; Match(STATE);
			State = 136; key();
			State = 137; comment();
			State = 141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 138; execute();
					}
					} 
				}
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AFTER) | (1L << NO) | (1L << ON))) != 0)) {
				{
				{
				State = 144; on_event_statement();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_event_statementContext : ParserRuleContext {
		public ITerminalNode NO() { return GetToken(WorkflowParser.NO, 0); }
		public ITerminalNode EVENT() { return GetToken(WorkflowParser.EVENT, 0); }
		public ITerminalNode ON() { return GetToken(WorkflowParser.ON, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode AFTER() { return GetToken(WorkflowParser.AFTER, 0); }
		public DelayContext delay() {
			return GetRuleContext<DelayContext>(0);
		}
		public Switch_stateContext[] switch_state() {
			return GetRuleContexts<Switch_stateContext>();
		}
		public Switch_stateContext switch_state(int i) {
			return GetRuleContext<Switch_stateContext>(i);
		}
		public On_event_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_event_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_event_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_event_statementContext on_event_statement() {
		On_event_statementContext _localctx = new On_event_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_on_event_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
				{
				State = 150; Match(NO);
				State = 151; Match(EVENT);
				}
				break;
			case ON:
				{
				State = 152; Match(ON);
				State = 153; Match(EVENT);
				State = 154; key();
				}
				break;
			case AFTER:
				{
				State = 155; Match(AFTER);
				State = 156; delay();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 160;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 159; switch_state();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelayContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode MINUTE() { return GetToken(WorkflowParser.MINUTE, 0); }
		public ITerminalNode HOUR() { return GetToken(WorkflowParser.HOUR, 0); }
		public ITerminalNode DAY() { return GetToken(WorkflowParser.DAY, 0); }
		public DelayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delay; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelayContext delay() {
		DelayContext _localctx = new DelayContext(Context, State);
		EnterRule(_localctx, 20, RULE_delay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; number();
			State = 165;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAY) | (1L << HOUR) | (1L << MINUTE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_stateContext : ParserRuleContext {
		public ITerminalNode SWITCH() { return GetToken(WorkflowParser.SWITCH, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(WorkflowParser.WHEN, 0); }
		public Rule_conditionContext rule_condition() {
			return GetRuleContext<Rule_conditionContext>(0);
		}
		public Execute2Context[] execute2() {
			return GetRuleContexts<Execute2Context>();
		}
		public Execute2Context execute2(int i) {
			return GetRuleContext<Execute2Context>(i);
		}
		public ITerminalNode WAITING() { return GetToken(WorkflowParser.WAITING, 0); }
		public DelayContext delay() {
			return GetRuleContext<DelayContext>(0);
		}
		public ITerminalNode BEFORE() { return GetToken(WorkflowParser.BEFORE, 0); }
		public Switch_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_state; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_state(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_stateContext switch_state() {
		Switch_stateContext _localctx = new Switch_stateContext(Context, State);
		EnterRule(_localctx, 22, RULE_switch_state);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 167; Match(WHEN);
				State = 168; rule_condition(0);
				}
			}

			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EXECUTE || _la==ON) {
					{
					{
					State = 171; execute2();
					}
					}
					State = 176;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WAITING) {
					{
					State = 177; Match(WAITING);
					State = 178; delay();
					State = 179; Match(BEFORE);
					}
				}

				State = 183; Match(SWITCH);
				State = 184; key();
				}
				break;
			case 2:
				{
				State = 186;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 185; execute2();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 188;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(WorkflowParser.ON, 0); }
		public ITerminalNode EXECUTE() { return GetToken(WorkflowParser.EXECUTE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(WorkflowParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(WorkflowParser.RIGHT_PAREN, 0); }
		public ITerminalNode ENTER() { return GetToken(WorkflowParser.ENTER, 0); }
		public ITerminalNode EXIT() { return GetToken(WorkflowParser.EXIT, 0); }
		public ActionsContext actions() {
			return GetRuleContext<ActionsContext>(0);
		}
		public ExecuteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteContext execute() {
		ExecuteContext _localctx = new ExecuteContext(Context, State);
		EnterRule(_localctx, 24, RULE_execute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(ON);
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 193; Match(ENTER);
				}
				break;
			case 2:
				{
				State = 194; Match(EXIT);
				}
				break;
			case 3:
				{
				State = 195; Match(ENTER);
				State = 196; Match(EXIT);
				}
				break;
			}
			State = 199; Match(EXECUTE);
			State = 200; Match(LEFT_PAREN);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR_STRING || _la==REGULAR_ID) {
				{
				State = 201; actions();
				}
			}

			State = 204; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute2Context : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(WorkflowParser.EXECUTE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(WorkflowParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(WorkflowParser.RIGHT_PAREN, 0); }
		public ITerminalNode ON() { return GetToken(WorkflowParser.ON, 0); }
		public ITerminalNode EXIT() { return GetToken(WorkflowParser.EXIT, 0); }
		public ActionsContext actions() {
			return GetRuleContext<ActionsContext>(0);
		}
		public Execute2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute2; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute2Context execute2() {
		Execute2Context _localctx = new Execute2Context(Context, State);
		EnterRule(_localctx, 26, RULE_execute2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 206; Match(ON);
				State = 207; Match(EXIT);
				}
			}

			State = 210; Match(EXECUTE);
			State = 211; Match(LEFT_PAREN);
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR_STRING || _la==REGULAR_ID) {
				{
				State = 212; actions();
				}
			}

			State = 215; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionsContext : ParserRuleContext {
		public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(WorkflowParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(WorkflowParser.COMMA, i);
		}
		public ActionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionsContext actions() {
		ActionsContext _localctx = new ActionsContext(Context, State);
		EnterRule(_localctx, 28, RULE_actions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; action();
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 218; Match(COMMA);
				State = 219; action();
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(WorkflowParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(WorkflowParser.RIGHT_PAREN, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 30, RULE_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; key();
			State = 226; Match(LEFT_PAREN);
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR_STRING) {
				{
				State = 227; arguments();
				}
			}

			State = 230; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(WorkflowParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(WorkflowParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 32, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; @string();
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 233; Match(COMMA);
				State = 234; @string();
				}
				}
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_conditionContext : ParserRuleContext {
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(WorkflowParser.NOT, 0); }
		public Rule_conditionContext[] rule_condition() {
			return GetRuleContexts<Rule_conditionContext>();
		}
		public Rule_conditionContext rule_condition(int i) {
			return GetRuleContext<Rule_conditionContext>(i);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(WorkflowParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(WorkflowParser.RIGHT_PAREN, 0); }
		public ITerminalNode AND() { return GetToken(WorkflowParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(WorkflowParser.OR, 0); }
		public Rule_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_condition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_conditionContext rule_condition() {
		return rule_condition(0);
	}

	private Rule_conditionContext rule_condition(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Rule_conditionContext _localctx = new Rule_conditionContext(Context, _parentState);
		Rule_conditionContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_rule_condition, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_STRING:
			case REGULAR_ID:
				{
				State = 241; key();
				}
				break;
			case NOT:
				{
				State = 242; Match(NOT);
				State = 243; rule_condition(4);
				}
				break;
			case LEFT_PAREN:
				{
				State = 244; Match(LEFT_PAREN);
				State = 245; rule_condition(0);
				State = 246; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 258;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 256;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						_localctx = new Rule_conditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rule_condition);
						State = 250;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 251; Match(AND);
						State = 252; rule_condition(4);
						}
						break;
					case 2:
						{
						_localctx = new Rule_conditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rule_condition);
						State = 253;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 254; Match(OR);
						State = 255; rule_condition(3);
						}
						break;
					}
					} 
				}
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Action_statementContext : ParserRuleContext {
		public ITerminalNode ACTION() { return GetToken(WorkflowParser.ACTION, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Action_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Action_statementContext action_statement() {
		Action_statementContext _localctx = new Action_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_action_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(ACTION);
			State = 262; key();
			State = 263; comment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_statementContext : ParserRuleContext {
		public ITerminalNode RULE() { return GetToken(WorkflowParser.RULE, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Rule_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_statementContext rule_statement() {
		Rule_statementContext _localctx = new Rule_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_rule_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(RULE);
			State = 266; key();
			State = 267; comment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_statementContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(WorkflowParser.EVENT, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public ITerminalNode NO() { return GetToken(WorkflowParser.NO, 0); }
		public Event_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_statementContext event_statement() {
		Event_statementContext _localctx = new Event_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_event_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO) {
				{
				State = 269; Match(NO);
				}
			}

			State = 272; Match(EVENT);
			State = 273; key();
			State = 274; comment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(WorkflowParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 42, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		public ITerminalNode CHAR_STRING() { return GetToken(WorkflowParser.CHAR_STRING, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(WorkflowParser.REGULAR_ID, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 44, RULE_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			_la = TokenStream.LA(1);
			if ( !(_la==CHAR_STRING || _la==REGULAR_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode CHAR_COMMENT() { return GetToken(WorkflowParser.CHAR_COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 46, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; Match(CHAR_COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericContext : ParserRuleContext {
		public NumbersContext[] numbers() {
			return GetRuleContexts<NumbersContext>();
		}
		public NumbersContext numbers(int i) {
			return GetRuleContext<NumbersContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(WorkflowParser.DOT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericContext numeric() {
		NumericContext _localctx = new NumericContext(Context, State);
		EnterRule(_localctx, 48, RULE_numeric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; numbers();
			{
			State = 283; Match(DOT);
			State = 284; numbers();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumbersContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(WorkflowParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(WorkflowParser.NUMBER, i);
		}
		public NumbersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numbers; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumbers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumbersContext numbers() {
		NumbersContext _localctx = new NumbersContext(Context, State);
		EnterRule(_localctx, 50, RULE_numbers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NUMBER) {
				{
				{
				State = 286; Match(NUMBER);
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode CHAR_STRING() { return GetToken(WorkflowParser.CHAR_STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 52, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; Match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return rule_condition_sempred((Rule_conditionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool rule_condition_sempred(Rule_conditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '/', '\x129', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '=', '\n', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x41', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x44', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', 
		'H', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 'I', '\x5', '\x2', 'L', '\n', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'Q', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', 'T', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '`', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', '\x63', '\v', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'q', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '|', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x6', '\t', '\x82', '\n', '\t', '\r', '\t', '\xE', 
		'\t', '\x83', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x88', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x8E', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\x91', '\v', '\n', '\x3', '\n', 
		'\a', '\n', '\x94', '\n', '\n', '\f', '\n', '\xE', '\n', '\x97', '\v', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\xA0', '\n', '\v', '\x3', '\v', 
		'\x6', '\v', '\xA3', '\n', '\v', '\r', '\v', '\xE', '\v', '\xA4', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xAC', '\n', '\r', '\x3', '\r', '\a', '\r', '\xAF', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\xB2', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xB8', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x6', '\r', '\xBD', '\n', '\r', '\r', '\r', '\xE', 
		'\r', '\xBE', '\x5', '\r', '\xC1', '\n', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xC8', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xCD', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\xD3', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\xD8', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xDF', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', '\xE2', '\v', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\xE7', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', 
		'\xEE', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xF1', '\v', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xFB', '\n', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\a', '\x13', '\x103', '\n', '\x13', '\f', '\x13', 
		'\xE', '\x13', '\x106', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x5', '\x16', '\x111', '\n', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\a', '\x1B', 
		'\x122', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x125', '\v', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x2', '\x3', '$', '\x1D', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x2', '\x5', '\x4', '\x2', 
		'\x10', '\x10', '\x13', '\x13', '\x5', '\x2', '\t', '\t', '\x11', '\x11', 
		'\x15', '\x15', '\x4', '\x2', '$', '$', '/', '/', '\x2', '\x134', '\x2', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x4', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x64', '\x3', '\x2', '\x2', '\x2', '\b', 'h', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'j', '\x3', '\x2', '\x2', '\x2', '\f', 'r', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '{', '\x3', '\x2', '\x2', '\x2', '\x10', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x85', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x16', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xD2', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', ' ', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xEA', '\x3', '\x2', '\x2', '\x2', '$', '\xFA', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x107', '\x3', '\x2', '\x2', '\x2', '(', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x110', '\x3', '\x2', '\x2', '\x2', 
		',', '\x116', '\x3', '\x2', '\x2', '\x2', '.', '\x118', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x32', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x126', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', '\x16', 
		'\x2', '\x2', '\x39', '<', '\x5', '.', '\x18', '\x2', ':', ';', '\a', 
		'\b', '\x2', '\x2', ';', '=', '\x5', '\x30', '\x19', '\x2', '<', ':', 
		'\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\x12', '\x2', '\x2', 
		'?', '\x41', '\a', '$', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', 
		'\x41', '\x44', '\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x45', 'G', '\a', '\x14', '\x2', '\x2', '\x46', 'H', '\x5', '\x4', '\x3', 
		'\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'L', '\x3', '\x2', '\x2', '\x2', 'K', '\x45', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'N', '\x5', '\b', '\x5', '\x2', 'N', 'O', '\a', 
		'(', '\x2', '\x2', 'O', 'Q', '\x3', '\x2', '\x2', '\x2', 'P', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'T', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', 
		'\x2', '\x2', '\x3', 'V', '\x3', '\x3', '\x2', '\x2', '\x2', 'W', 'X', 
		'\a', '&', '\x2', '\x2', 'X', 'Y', '\x5', '\x6', '\x4', '\x2', 'Y', '\x61', 
		'\a', '\'', '\x2', '\x2', 'Z', '[', '\a', ')', '\x2', '\x2', '[', '\\', 
		'\a', '&', '\x2', '\x2', '\\', ']', '\x5', '\x6', '\x4', '\x2', ']', '^', 
		'\a', '\'', '\x2', '\x2', '^', '`', '\x3', '\x2', '\x2', '\x2', '_', 'Z', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x5', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\x5', '.', '\x18', '\x2', '\x65', 
		'\x66', '\a', '\xE', '\x2', '\x2', '\x66', 'g', '\a', '$', '\x2', '\x2', 
		'g', '\a', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x5', '\n', '\x6', '\x2', 
		'i', '\t', '\x3', '\x2', '\x2', '\x2', 'j', 'p', '\a', '\n', '\x2', '\x2', 
		'k', 'q', '\x5', '*', '\x16', '\x2', 'l', 'q', '\x5', '(', '\x15', '\x2', 
		'm', 'q', '\x5', '&', '\x14', '\x2', 'n', 'q', '\x5', '\f', '\a', '\x2', 
		'o', 'q', '\x5', '\x10', '\t', '\x2', 'p', 'k', '\x3', '\x2', '\x2', '\x2', 
		'p', 'l', '\x3', '\x2', '\x2', '\x2', 'p', 'm', '\x3', '\x2', '\x2', '\x2', 
		'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 
		'q', '\v', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\a', '\x2', '\x2', 
		's', 't', '\x5', '.', '\x18', '\x2', 't', 'u', '\x5', '\xE', '\b', '\x2', 
		'u', 'v', '\x5', '\x30', '\x19', '\x2', 'v', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'w', '|', '\x5', '\x36', '\x1C', '\x2', 'x', '|', '\x5', '\x34', 
		'\x1B', '\x2', 'y', '|', '\x5', '\x16', '\f', '\x2', 'z', '|', '\a', '/', 
		'\x2', '\x2', '{', 'w', '\x3', '\x2', '\x2', '\x2', '{', 'x', '\x3', '\x2', 
		'\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '{', 'z', '\x3', '\x2', 
		'\x2', '\x2', '|', '\xF', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', 
		'\x1E', '\x2', '\x2', '~', '\x7F', '\x5', '.', '\x18', '\x2', '\x7F', 
		'\x81', '\x5', '\x30', '\x19', '\x2', '\x80', '\x82', '\x5', '\x12', '\n', 
		'\x2', '\x81', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x87', '\a', '\"', '\x2', '\x2', '\x86', '\x88', '\t', 
		'\x2', '\x2', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x8A', '\a', '\x1F', '\x2', '\x2', '\x8A', '\x8B', '\x5', 
		'.', '\x18', '\x2', '\x8B', '\x8F', '\x5', '\x30', '\x19', '\x2', '\x8C', 
		'\x8E', '\x5', '\x1A', '\xE', '\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x91', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x94', '\x5', '\x14', '\v', '\x2', '\x93', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x97', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x13', '\x3', '\x2', '\x2', '\x2', '\x97', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\x17', '\x2', '\x2', '\x99', 
		'\xA0', '\a', '\v', '\x2', '\x2', '\x9A', '\x9B', '\a', '\x19', '\x2', 
		'\x2', '\x9B', '\x9C', '\a', '\v', '\x2', '\x2', '\x9C', '\xA0', '\x5', 
		'.', '\x18', '\x2', '\x9D', '\x9E', '\a', '\x4', '\x2', '\x2', '\x9E', 
		'\xA0', '\x5', '\x16', '\f', '\x2', '\x9F', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xA3', '\x5', '\x18', '\r', '\x2', '\xA2', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x5', ',', '\x17', 
		'\x2', '\xA7', '\xA8', '\t', '\x3', '\x2', '\x2', '\xA8', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', '#', '\x2', '\x2', '\xAA', 
		'\xAC', '\x5', '$', '\x13', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xAF', '\x5', '\x1C', '\xF', '\x2', '\xAE', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', '!', '\x2', 
		'\x2', '\xB4', '\xB5', '\x5', '\x16', '\f', '\x2', '\xB5', '\xB6', '\a', 
		'\x6', '\x2', '\x2', '\xB6', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\a', 
		'\x1D', '\x2', '\x2', '\xBA', '\xC1', '\x5', '.', '\x18', '\x2', '\xBB', 
		'\xBD', '\x5', '\x1C', '\xF', '\x2', '\xBC', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xC1', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC7', '\a', '\x19', '\x2', '\x2', '\xC3', 
		'\xC8', '\a', '\r', '\x2', '\x2', '\xC4', '\xC8', '\a', '\xF', '\x2', 
		'\x2', '\xC5', '\xC6', '\a', '\r', '\x2', '\x2', '\xC6', '\xC8', '\a', 
		'\xF', '\x2', '\x2', '\xC7', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', 
		'\f', '\x2', '\x2', '\xCA', '\xCC', '\a', '&', '\x2', '\x2', '\xCB', '\xCD', 
		'\x5', '\x1E', '\x10', '\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCF', '\a', '\'', '\x2', '\x2', '\xCF', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\a', '\x19', '\x2', '\x2', 
		'\xD1', '\xD3', '\a', '\xF', '\x2', '\x2', '\xD2', '\xD0', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\a', '\f', '\x2', '\x2', 
		'\xD5', '\xD7', '\a', '&', '\x2', '\x2', '\xD6', '\xD8', '\x5', '\x1E', 
		'\x10', '\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\xD9', '\xDA', '\a', '\'', '\x2', '\x2', '\xDA', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xE0', '\x5', ' ', '\x11', '\x2', '\xDC', '\xDD', 
		'\a', ')', '\x2', '\x2', '\xDD', '\xDF', '\x5', ' ', '\x11', '\x2', '\xDE', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x5', '.', '\x18', 
		'\x2', '\xE4', '\xE6', '\a', '&', '\x2', '\x2', '\xE5', '\xE7', '\x5', 
		'\"', '\x12', '\x2', '\xE6', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE9', '\a', '\'', '\x2', '\x2', '\xE9', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xEF', '\x5', '\x36', '\x1C', '\x2', '\xEB', '\xEC', 
		'\a', ')', '\x2', '\x2', '\xEC', '\xEE', '\x5', '\x36', '\x1C', '\x2', 
		'\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF1', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '#', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\b', '\x13', '\x1', 
		'\x2', '\xF3', '\xFB', '\x5', '.', '\x18', '\x2', '\xF4', '\xF5', '\a', 
		'\x18', '\x2', '\x2', '\xF5', '\xFB', '\x5', '$', '\x13', '\x6', '\xF6', 
		'\xF7', '\a', '&', '\x2', '\x2', '\xF7', '\xF8', '\x5', '$', '\x13', '\x2', 
		'\xF8', '\xF9', '\a', '\'', '\x2', '\x2', '\xF9', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF4', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\xF6', '\x3', '\x2', '\x2', '\x2', 
		'\xFB', '\x104', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\f', '\x5', 
		'\x2', '\x2', '\xFD', '\xFE', '\a', '\x5', '\x2', '\x2', '\xFE', '\x103', 
		'\x5', '$', '\x13', '\x6', '\xFF', '\x100', '\f', '\x4', '\x2', '\x2', 
		'\x100', '\x101', '\a', '\x1A', '\x2', '\x2', '\x101', '\x103', '\x5', 
		'$', '\x13', '\x5', '\x102', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x103', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x105', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x104', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\a', 
		'\x3', '\x2', '\x2', '\x108', '\x109', '\x5', '.', '\x18', '\x2', '\x109', 
		'\x10A', '\x5', '\x30', '\x19', '\x2', '\x10A', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x10B', '\x10C', '\a', '\x1C', '\x2', '\x2', '\x10C', '\x10D', 
		'\x5', '.', '\x18', '\x2', '\x10D', '\x10E', '\x5', '\x30', '\x19', '\x2', 
		'\x10E', ')', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x111', '\a', '\x17', 
		'\x2', '\x2', '\x110', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x113', '\a', '\v', '\x2', '\x2', '\x113', '\x114', '\x5', '.', 
		'\x18', '\x2', '\x114', '\x115', '\x5', '\x30', '\x19', '\x2', '\x115', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\a', ',', '\x2', '\x2', 
		'\x117', '-', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\t', '\x4', 
		'\x2', '\x2', '\x119', '/', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', 
		'\a', '%', '\x2', '\x2', '\x11B', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11D', '\x5', '\x34', '\x1B', '\x2', '\x11D', '\x11E', '\a', 
		'*', '\x2', '\x2', '\x11E', '\x11F', '\x5', '\x34', '\x1B', '\x2', '\x11F', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x120', '\x122', '\a', ',', '\x2', 
		'\x2', '\x121', '\x120', '\x3', '\x2', '\x2', '\x2', '\x122', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x124', '\x3', '\x2', '\x2', '\x2', '\x124', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x123', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x127', '\a', '$', '\x2', '\x2', '\x127', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '!', '<', '\x42', 'I', 'K', 'R', '\x61', 'p', '{', '\x83', '\x87', 
		'\x8F', '\x95', '\x9F', '\xA4', '\xAB', '\xB0', '\xB7', '\xBE', '\xC0', 
		'\xC7', '\xCC', '\xD2', '\xD7', '\xE0', '\xE6', '\xEF', '\xFA', '\x102', 
		'\x104', '\x110', '\x123',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Pssa.Workflow.Parser
