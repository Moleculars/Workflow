//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BusinessRuleParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.BusinessRule.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class BusinessRuleParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CONST=1, DATA=2, DAY=3, DECLARE=4, DESCRIPTION=5, ELSE=6, EVENT=7, FUNCTION=8, 
		HOUR=9, LOAD=10, MATCHING=11, MINUTE=12, NAME=13, RETURN=14, WHEN=15, 
		CHAR_STRING=16, CHAR_COMMENT=17, LEFT_PAREN=18, LEFT_BRACKET=19, RIGHT_PAREN=20, 
		RIGHT_BRACKET=21, SEMICOLON=22, COMMA=23, PLUS=24, MINUS=25, TIME=26, 
		DOT=27, DIVID=28, NOT=29, EQUAL=30, MODULO=31, POWER=32, NOT_EQUAL=33, 
		GREATER=34, GREATER_OR_EQUAL=35, LESS=36, LESS_OR_EQUAL=37, XOR=38, OR=39, 
		AND=40, ANDALSO=41, SPACES=42, NUMBER=43, SINGLE_LINE_COMMENT=44, MULTI_LINE_COMMENT=45, 
		REGULAR_ID=46;
	public const int
		RULE_script = 0, RULE_declare_constants = 1, RULE_declare_constant = 2, 
		RULE_matchings = 3, RULE_matching = 4, RULE_unit_statement = 5, RULE_load_data = 6, 
		RULE_function = 7, RULE_parameters = 8, RULE_parameter = 9, RULE_rule = 10, 
		RULE_result = 11, RULE_action = 12, RULE_expre = 13, RULE_expre_action = 14, 
		RULE_arguments = 15, RULE_argument = 16, RULE_operation = 17, RULE_comparer = 18, 
		RULE_identifiers = 19, RULE_identifier = 20, RULE_comment = 21, RULE_constant = 22, 
		RULE_number = 23, RULE_integer = 24, RULE_float = 25, RULE_delay = 26, 
		RULE_string = 27;
	public static readonly string[] ruleNames = {
		"script", "declare_constants", "declare_constant", "matchings", "matching", 
		"unit_statement", "load_data", "function", "parameters", "parameter", 
		"rule", "result", "action", "expre", "expre_action", "arguments", "argument", 
		"operation", "comparer", "identifiers", "identifier", "comment", "constant", 
		"number", "integer", "float", "delay", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "'CONST'", "'DATA'", "'DAY'", "'DECLARE'", "'DESCRIPTION'", "'ELSE'", 
		"'EVENT'", "'FUNCTION'", "'HOUR'", "'LOAD'", "'MATCHING'", "'MINUTE'", 
		"'NAME'", "'RETURN'", "'WHEN'", null, null, "'('", "'['", "')'", "']'", 
		"';'", "','", "'+'", "'-'", "'*'", "'.'", "'\\'", "'!'", "'='", "'%'", 
		"'^'", "'!='", "'>'", "'>='", "'<'", "'<='", "'||'", "'|'", "'&'", "'&&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CONST", "DATA", "DAY", "DECLARE", "DESCRIPTION", "ELSE", "EVENT", 
		"FUNCTION", "HOUR", "LOAD", "MATCHING", "MINUTE", "NAME", "RETURN", "WHEN", 
		"CHAR_STRING", "CHAR_COMMENT", "LEFT_PAREN", "LEFT_BRACKET", "RIGHT_PAREN", 
		"RIGHT_BRACKET", "SEMICOLON", "COMMA", "PLUS", "MINUS", "TIME", "DOT", 
		"DIVID", "NOT", "EQUAL", "MODULO", "POWER", "NOT_EQUAL", "GREATER", "GREATER_OR_EQUAL", 
		"LESS", "LESS_OR_EQUAL", "XOR", "OR", "AND", "ANDALSO", "SPACES", "NUMBER", 
		"SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "REGULAR_ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BusinessRuleParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BusinessRuleParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BusinessRuleParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BusinessRuleParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ScriptContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(BusinessRuleParser.NAME, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EVENT() { return GetToken(BusinessRuleParser.EVENT, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(BusinessRuleParser.CHAR_STRING, 0); }
		public ITerminalNode Eof() { return GetToken(BusinessRuleParser.Eof, 0); }
		public ITerminalNode DESCRIPTION() { return GetToken(BusinessRuleParser.DESCRIPTION, 0); }
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public ITerminalNode MATCHING() { return GetToken(BusinessRuleParser.MATCHING, 0); }
		public Declare_constantsContext declare_constants() {
			return GetRuleContext<Declare_constantsContext>(0);
		}
		public Unit_statementContext[] unit_statement() {
			return GetRuleContexts<Unit_statementContext>();
		}
		public Unit_statementContext unit_statement(int i) {
			return GetRuleContext<Unit_statementContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(BusinessRuleParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(BusinessRuleParser.SEMICOLON, i);
		}
		public MatchingsContext[] matchings() {
			return GetRuleContexts<MatchingsContext>();
		}
		public MatchingsContext matchings(int i) {
			return GetRuleContext<MatchingsContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(NAME);
			State = 57; identifier();
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DESCRIPTION) {
				{
				State = 58; Match(DESCRIPTION);
				State = 59; comment();
				}
			}

			State = 62; Match(EVENT);
			State = 63; Match(CHAR_STRING);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MATCHING) {
				{
				State = 64; Match(MATCHING);
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 65; matchings();
					}
					}
					State = 68;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LEFT_PAREN );
				}
			}

			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECLARE) {
				{
				State = 72; declare_constants();
				}
			}

			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOAD || _la==WHEN) {
				{
				{
				State = 75; unit_statement();
				State = 76; Match(SEMICOLON);
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 83; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_constantsContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(BusinessRuleParser.DECLARE, 0); }
		public Declare_constantContext[] declare_constant() {
			return GetRuleContexts<Declare_constantContext>();
		}
		public Declare_constantContext declare_constant(int i) {
			return GetRuleContext<Declare_constantContext>(i);
		}
		public Declare_constantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_constants; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_constants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_constantsContext declare_constants() {
		Declare_constantsContext _localctx = new Declare_constantsContext(Context, State);
		EnterRule(_localctx, 2, RULE_declare_constants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(DECLARE);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 86; declare_constant();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CONST );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_constantContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(BusinessRuleParser.CONST, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(BusinessRuleParser.EQUAL, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Declare_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_constantContext declare_constant() {
		Declare_constantContext _localctx = new Declare_constantContext(Context, State);
		EnterRule(_localctx, 4, RULE_declare_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(CONST);
			State = 92; identifier();
			State = 93; Match(EQUAL);
			State = 94; constant();
			State = 95; comment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchingsContext : ParserRuleContext {
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(BusinessRuleParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(BusinessRuleParser.LEFT_PAREN, i);
		}
		public MatchingContext[] matching() {
			return GetRuleContexts<MatchingContext>();
		}
		public MatchingContext matching(int i) {
			return GetRuleContext<MatchingContext>(i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(BusinessRuleParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(BusinessRuleParser.RIGHT_PAREN, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BusinessRuleParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BusinessRuleParser.COMMA, i);
		}
		public MatchingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchings; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchingsContext matchings() {
		MatchingsContext _localctx = new MatchingsContext(Context, State);
		EnterRule(_localctx, 6, RULE_matchings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(LEFT_PAREN);
			State = 98; matching();
			State = 99; Match(RIGHT_PAREN);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 100; Match(COMMA);
				State = 101; Match(LEFT_PAREN);
				State = 102; matching();
				State = 103; Match(RIGHT_PAREN);
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchingContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(BusinessRuleParser.EQUAL, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(BusinessRuleParser.CHAR_STRING, 0); }
		public MatchingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matching; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatching(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchingContext matching() {
		MatchingContext _localctx = new MatchingContext(Context, State);
		EnterRule(_localctx, 8, RULE_matching);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; identifier();
			State = 111; Match(EQUAL);
			State = 112; Match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unit_statementContext : ParserRuleContext {
		public RuleContext rule() {
			return GetRuleContext<RuleContext>(0);
		}
		public Load_dataContext load_data() {
			return GetRuleContext<Load_dataContext>(0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnit_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unit_statementContext unit_statement() {
		Unit_statementContext _localctx = new Unit_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_unit_statement);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; rule();
				}
				break;
			case LOAD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115; load_data();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Load_dataContext : ParserRuleContext {
		public ITerminalNode LOAD() { return GetToken(BusinessRuleParser.LOAD, 0); }
		public ITerminalNode DATA() { return GetToken(BusinessRuleParser.DATA, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(BusinessRuleParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(BusinessRuleParser.RIGHT_PAREN, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Load_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load_data; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoad_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Load_dataContext load_data() {
		Load_dataContext _localctx = new Load_dataContext(Context, State);
		EnterRule(_localctx, 12, RULE_load_data);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(LOAD);
			State = 119; Match(DATA);
			State = 120; identifier();
			State = 121; Match(LEFT_PAREN);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHAR_STRING) | (1L << PLUS) | (1L << MINUS) | (1L << NUMBER) | (1L << REGULAR_ID))) != 0)) {
				{
				State = 122; arguments();
				}
			}

			State = 125; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(BusinessRuleParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(BusinessRuleParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(BusinessRuleParser.RIGHT_PAREN, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(FUNCTION);
			State = 128; identifier();
			State = 129; Match(LEFT_PAREN);
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR_STRING || _la==REGULAR_ID) {
				{
				State = 130; parameters();
				}
			}

			State = 133; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BusinessRuleParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BusinessRuleParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; parameter();
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 136; Match(COMMA);
				State = 137; parameter();
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		public ResultContext thenResult;
		public RuleContext elseRule;
		public ITerminalNode WHEN() { return GetToken(BusinessRuleParser.WHEN, 0); }
		public Expre_actionContext expre_action() {
			return GetRuleContext<Expre_actionContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(BusinessRuleParser.ELSE, 0); }
		public ResultContext[] result() {
			return GetRuleContexts<ResultContext>();
		}
		public ResultContext result(int i) {
			return GetRuleContext<ResultContext>(i);
		}
		public RuleContext rule() {
			return GetRuleContext<RuleContext>(0);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(Context, State);
		EnterRule(_localctx, 20, RULE_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(WHEN);
			State = 146; expre_action();
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 147; _localctx.thenResult = result();
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==RETURN );
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 152; Match(ELSE);
				State = 153; _localctx.elseRule = rule();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(BusinessRuleParser.RETURN, 0); }
		public ITerminalNode EVENT() { return GetToken(BusinessRuleParser.EVENT, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(Context, State);
		EnterRule(_localctx, 22, RULE_result);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(RETURN);
			State = 157; Match(EVENT);
			State = 158; identifier();
			State = 159; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(BusinessRuleParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(BusinessRuleParser.RIGHT_PAREN, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 24, RULE_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; identifier();
			State = 162; Match(LEFT_PAREN);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHAR_STRING) | (1L << PLUS) | (1L << MINUS) | (1L << NUMBER) | (1L << REGULAR_ID))) != 0)) {
				{
				State = 163; arguments();
				}
			}

			State = 166; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpreContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public ExpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expre; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpre(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpreContext expre() {
		ExpreContext _localctx = new ExpreContext(Context, State);
		EnterRule(_localctx, 26, RULE_expre);
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 168; constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169; identifiers();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expre_actionContext : ParserRuleContext {
		public IToken not1;
		public IToken @operator;
		public IToken not2;
		public Expre_actionContext exp2;
		public Expre_actionContext exp1;
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public ITerminalNode[] NOT() { return GetTokens(BusinessRuleParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(BusinessRuleParser.NOT, i);
		}
		public Expre_actionContext[] expre_action() {
			return GetRuleContexts<Expre_actionContext>();
		}
		public Expre_actionContext expre_action(int i) {
			return GetRuleContext<Expre_actionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(BusinessRuleParser.AND, 0); }
		public ITerminalNode ANDALSO() { return GetToken(BusinessRuleParser.ANDALSO, 0); }
		public ITerminalNode OR() { return GetToken(BusinessRuleParser.OR, 0); }
		public ITerminalNode XOR() { return GetToken(BusinessRuleParser.XOR, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(BusinessRuleParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(BusinessRuleParser.RIGHT_PAREN, 0); }
		public Expre_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expre_action; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpre_action(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expre_actionContext expre_action() {
		Expre_actionContext _localctx = new Expre_actionContext(Context, State);
		EnterRule(_localctx, 28, RULE_expre_action);
		int _la;
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 172; _localctx.not1 = Match(NOT);
					}
				}

				State = 175; action();
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << XOR) | (1L << OR) | (1L << AND) | (1L << ANDALSO))) != 0)) {
					{
					State = 176;
					_localctx.@operator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << XOR) | (1L << OR) | (1L << AND) | (1L << ANDALSO))) != 0)) ) {
						_localctx.@operator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 178;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						State = 177; _localctx.not2 = Match(NOT);
						}
						break;
					}
					State = 180; _localctx.exp2 = expre_action();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 183; _localctx.not1 = Match(NOT);
					}
				}

				State = 186; Match(LEFT_PAREN);
				State = 187; _localctx.exp1 = expre_action();
				State = 188; Match(RIGHT_PAREN);
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << XOR) | (1L << OR) | (1L << AND) | (1L << ANDALSO))) != 0)) {
					{
					State = 189;
					_localctx.@operator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << XOR) | (1L << OR) | (1L << AND) | (1L << ANDALSO))) != 0)) ) {
						_localctx.@operator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 191;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						State = 190; _localctx.not2 = Match(NOT);
						}
						break;
					}
					State = 193; _localctx.exp2 = expre_action();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BusinessRuleParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BusinessRuleParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 30, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; argument();
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 199; Match(COMMA);
				State = 200; argument();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpreContext expre() {
			return GetRuleContext<ExpreContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 32, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; expre();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(BusinessRuleParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(BusinessRuleParser.MINUS, 0); }
		public ITerminalNode TIME() { return GetToken(BusinessRuleParser.TIME, 0); }
		public ITerminalNode DIVID() { return GetToken(BusinessRuleParser.DIVID, 0); }
		public ITerminalNode MODULO() { return GetToken(BusinessRuleParser.MODULO, 0); }
		public ITerminalNode POWER() { return GetToken(BusinessRuleParser.POWER, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 34, RULE_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << TIME) | (1L << DIVID) | (1L << MODULO) | (1L << POWER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparerContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(BusinessRuleParser.EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(BusinessRuleParser.NOT_EQUAL, 0); }
		public ITerminalNode GREATER() { return GetToken(BusinessRuleParser.GREATER, 0); }
		public ITerminalNode GREATER_OR_EQUAL() { return GetToken(BusinessRuleParser.GREATER_OR_EQUAL, 0); }
		public ITerminalNode LESS() { return GetToken(BusinessRuleParser.LESS, 0); }
		public ITerminalNode LESS_OR_EQUAL() { return GetToken(BusinessRuleParser.LESS_OR_EQUAL, 0); }
		public ComparerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparerContext comparer() {
		ComparerContext _localctx = new ComparerContext(Context, State);
		EnterRule(_localctx, 36, RULE_comparer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << NOT_EQUAL) | (1L << GREATER) | (1L << GREATER_OR_EQUAL) | (1L << LESS) | (1L << LESS_OR_EQUAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiersContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(BusinessRuleParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(BusinessRuleParser.DOT, i);
		}
		public IdentifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiers; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiersContext identifiers() {
		IdentifiersContext _localctx = new IdentifiersContext(Context, State);
		EnterRule(_localctx, 38, RULE_identifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; identifier();
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 213; Match(DOT);
				State = 214; identifier();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode CHAR_STRING() { return GetToken(BusinessRuleParser.CHAR_STRING, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(BusinessRuleParser.REGULAR_ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			_la = TokenStream.LA(1);
			if ( !(_la==CHAR_STRING || _la==REGULAR_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode CHAR_COMMENT() { return GetToken(BusinessRuleParser.CHAR_COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 42, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(CHAR_COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ComparerContext comparer() {
			return GetRuleContext<ComparerContext>(0);
		}
		public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(BusinessRuleParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(BusinessRuleParser.PLUS, i);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 44, RULE_constant);
		int _la;
		try {
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224; number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225; number();
				State = 226; operation();
				State = 227; number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 229; number();
				State = 230; comparer();
				State = 231; number();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 233; @string();
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PLUS) {
					{
					{
					State = 234; Match(PLUS);
					State = 235; @string();
					}
					}
					State = 240;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 46, RULE_number);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243; integer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244; @float();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(BusinessRuleParser.NUMBER, 0); }
		public DelayContext delay() {
			return GetRuleContext<DelayContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(BusinessRuleParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(BusinessRuleParser.MINUS, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 48, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 247;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 250; Match(NUMBER);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAY) | (1L << HOUR) | (1L << MINUTE))) != 0)) {
				{
				State = 251; delay();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(BusinessRuleParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(BusinessRuleParser.NUMBER, i);
		}
		public ITerminalNode COMMA() { return GetToken(BusinessRuleParser.COMMA, 0); }
		public ITerminalNode PLUS() { return GetToken(BusinessRuleParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(BusinessRuleParser.MINUS, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 50, RULE_float);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 254;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 257; Match(NUMBER);
			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 258; Match(COMMA);
				State = 259; Match(NUMBER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelayContext : ParserRuleContext {
		public ITerminalNode MINUTE() { return GetToken(BusinessRuleParser.MINUTE, 0); }
		public ITerminalNode HOUR() { return GetToken(BusinessRuleParser.HOUR, 0); }
		public ITerminalNode DAY() { return GetToken(BusinessRuleParser.DAY, 0); }
		public DelayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delay; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelayContext delay() {
		DelayContext _localctx = new DelayContext(Context, State);
		EnterRule(_localctx, 52, RULE_delay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAY) | (1L << HOUR) | (1L << MINUTE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode CHAR_STRING() { return GetToken(BusinessRuleParser.CHAR_STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBusinessRuleParserVisitor<TResult> typedVisitor = visitor as IBusinessRuleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 54, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; Match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x30', '\x10D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '?', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x6', '\x2', '\x45', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x46', 
		'\x5', '\x2', 'I', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', 'L', '\n', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'Q', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', 'T', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', 'Z', '\n', '\x3', '\r', 
		'\x3', '\xE', '\x3', '[', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', 'l', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'o', 
		'\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 'w', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '~', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x86', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', '\x8D', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\x90', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x6', '\f', '\x97', '\n', '\f', '\r', '\f', 
		'\xE', '\f', '\x98', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x9D', '\n', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xA7', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\xAD', '\n', '\xF', '\x3', '\x10', '\x5', '\x10', '\xB0', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xB5', 
		'\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\xB8', '\n', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xBB', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xC2', '\n', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\xC5', '\n', '\x10', '\x5', '\x10', 
		'\xC7', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\xCC', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xCF', '\v', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', 
		'\x15', '\xDA', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xDD', '\v', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\a', '\x18', '\xEF', '\n', '\x18', '\f', '\x18', 
		'\xE', '\x18', '\xF2', '\v', '\x18', '\x5', '\x18', '\xF4', '\n', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\xF8', '\n', '\x19', '\x3', 
		'\x1A', '\x5', '\x1A', '\xFB', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\xFF', '\n', '\x1A', '\x3', '\x1B', '\x5', '\x1B', '\x102', 
		'\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\x107', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x2', '\x2', '\x1E', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', '\x2', '\b', '\x3', '\x2', '(', '+', '\x5', '\x2', '\x1A', 
		'\x1C', '\x1E', '\x1E', '!', '\"', '\x4', '\x2', ' ', ' ', '#', '\'', 
		'\x4', '\x2', '\x12', '\x12', '\x30', '\x30', '\x3', '\x2', '\x1A', '\x1B', 
		'\x5', '\x2', '\x5', '\x5', '\v', '\v', '\xE', '\xE', '\x2', '\x111', 
		'\x2', ':', '\x3', '\x2', '\x2', '\x2', '\x4', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\x6', ']', '\x3', '\x2', '\x2', '\x2', '\b', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'p', '\x3', '\x2', '\x2', '\x2', '\f', 'v', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'x', '\x3', '\x2', '\x2', '\x2', '\x10', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x91', '\x3', '\x2', '\x2', '\x2', '\x16', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xC6', '\x3', '\x2', '\x2', '\x2', ' ', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xD0', '\x3', '\x2', '\x2', '\x2', '$', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xD4', '\x3', '\x2', '\x2', '\x2', '(', '\xD6', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xDE', '\x3', '\x2', '\x2', '\x2', ',', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '.', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x32', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x101', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x108', '\x3', '\x2', '\x2', '\x2', '\x38', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', ':', ';', '\a', '\xF', '\x2', '\x2', ';', '>', '\x5', '*', '\x16', 
		'\x2', '<', '=', '\a', '\a', '\x2', '\x2', '=', '?', '\x5', ',', '\x17', 
		'\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', 
		'\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '\t', 
		'\x2', '\x2', '\x41', 'H', '\a', '\x12', '\x2', '\x2', '\x42', '\x44', 
		'\a', '\r', '\x2', '\x2', '\x43', '\x45', '\x5', '\b', '\x5', '\x2', '\x44', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'I', '\x3', '\x2', '\x2', '\x2', 'H', '\x42', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 
		'K', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\x5', '\x4', '\x3', '\x2', 
		'K', 'J', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', 'R', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x5', '\f', '\a', '\x2', 
		'N', 'O', '\a', '\x18', '\x2', '\x2', 'O', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'P', 'M', '\x3', '\x2', '\x2', '\x2', 'Q', 'T', '\x3', '\x2', '\x2', '\x2', 
		'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 
		'S', 'U', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\a', '\x2', '\x2', '\x3', 'V', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'Y', '\a', '\x6', '\x2', '\x2', 'X', 'Z', '\x5', '\x6', '\x4', 
		'\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', 
		'\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x5', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', 
		'\x3', '\x2', '\x2', '^', '_', '\x5', '*', '\x16', '\x2', '_', '`', '\a', 
		' ', '\x2', '\x2', '`', '\x61', '\x5', '.', '\x18', '\x2', '\x61', '\x62', 
		'\x5', ',', '\x17', '\x2', '\x62', '\a', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x64', '\a', '\x14', '\x2', '\x2', '\x64', '\x65', '\x5', '\n', '\x6', 
		'\x2', '\x65', 'm', '\a', '\x16', '\x2', '\x2', '\x66', 'g', '\a', '\x19', 
		'\x2', '\x2', 'g', 'h', '\a', '\x14', '\x2', '\x2', 'h', 'i', '\x5', '\n', 
		'\x6', '\x2', 'i', 'j', '\a', '\x16', '\x2', '\x2', 'j', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'k', '\x66', '\x3', '\x2', '\x2', '\x2', 'l', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'n', '\t', '\x3', '\x2', '\x2', '\x2', 'o', 'm', 
		'\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x5', '*', '\x16', '\x2', 'q', 
		'r', '\a', ' ', '\x2', '\x2', 'r', 's', '\a', '\x12', '\x2', '\x2', 's', 
		'\v', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x5', '\x16', '\f', '\x2', 
		'u', 'w', '\x5', '\xE', '\b', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 
		'v', 'u', '\x3', '\x2', '\x2', '\x2', 'w', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\a', '\f', '\x2', '\x2', 'y', 'z', '\a', '\x4', '\x2', 
		'\x2', 'z', '{', '\x5', '*', '\x16', '\x2', '{', '}', '\a', '\x14', '\x2', 
		'\x2', '|', '~', '\x5', ' ', '\x11', '\x2', '}', '|', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x80', '\a', '\x16', '\x2', '\x2', '\x80', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\a', '\n', '\x2', '\x2', 
		'\x82', '\x83', '\x5', '*', '\x16', '\x2', '\x83', '\x85', '\a', '\x14', 
		'\x2', '\x2', '\x84', '\x86', '\x5', '\x12', '\n', '\x2', '\x85', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\a', '\x16', 
		'\x2', '\x2', '\x88', '\x11', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8E', 
		'\x5', '\x14', '\v', '\x2', '\x8A', '\x8B', '\a', '\x19', '\x2', '\x2', 
		'\x8B', '\x8D', '\x5', '\x14', '\v', '\x2', '\x8C', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x13', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x92', '\x5', '*', '\x16', '\x2', '\x92', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\x11', '\x2', '\x2', 
		'\x94', '\x96', '\x5', '\x1E', '\x10', '\x2', '\x95', '\x97', '\x5', '\x18', 
		'\r', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x9B', '\a', '\b', '\x2', '\x2', '\x9B', '\x9D', 
		'\x5', '\x16', '\f', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x9F', '\a', '\x10', '\x2', '\x2', '\x9F', '\xA0', 
		'\a', '\t', '\x2', '\x2', '\xA0', '\xA1', '\x5', '*', '\x16', '\x2', '\xA1', 
		'\xA2', '\x5', '*', '\x16', '\x2', '\xA2', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA4', '\x5', '*', '\x16', '\x2', '\xA4', '\xA6', '\a', 
		'\x14', '\x2', '\x2', '\xA5', '\xA7', '\x5', ' ', '\x11', '\x2', '\xA6', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\a', 
		'\x16', '\x2', '\x2', '\xA9', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAD', '\x5', '.', '\x18', '\x2', '\xAB', '\xAD', '\x5', '(', '\x15', 
		'\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xB0', '\a', '\x1F', '\x2', '\x2', '\xAF', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB7', '\x5', '\x1A', '\xE', '\x2', '\xB2', 
		'\xB4', '\t', '\x2', '\x2', '\x2', '\xB3', '\xB5', '\a', '\x1F', '\x2', 
		'\x2', '\xB4', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB8', '\x5', '\x1E', '\x10', '\x2', '\xB7', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBB', '\a', '\x1F', '\x2', '\x2', '\xBA', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', 
		'\x14', '\x2', '\x2', '\xBD', '\xBE', '\x5', '\x1E', '\x10', '\x2', '\xBE', 
		'\xC4', '\a', '\x16', '\x2', '\x2', '\xBF', '\xC1', '\t', '\x2', '\x2', 
		'\x2', '\xC0', '\xC2', '\a', '\x1F', '\x2', '\x2', '\xC1', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC5', '\x5', '\x1E', '\x10', 
		'\x2', '\xC4', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCD', '\x5', 
		'\"', '\x12', '\x2', '\xC9', '\xCA', '\a', '\x19', '\x2', '\x2', '\xCA', 
		'\xCC', '\x5', '\"', '\x12', '\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xD1', '\x5', '\x1C', '\xF', '\x2', '\xD1', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD3', '\t', '\x3', '\x2', '\x2', '\xD3', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\t', '\x4', '\x2', '\x2', 
		'\xD5', '\'', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xDB', '\x5', '*', 
		'\x16', '\x2', '\xD7', '\xD8', '\a', '\x1D', '\x2', '\x2', '\xD8', '\xDA', 
		'\x5', '*', '\x16', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', ')', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\xDF', '\t', '\x5', '\x2', '\x2', '\xDF', '+', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xE1', '\a', '\x13', '\x2', '\x2', '\xE1', '-', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\xF4', '\x5', '\x30', '\x19', '\x2', 
		'\xE3', '\xE4', '\x5', '\x30', '\x19', '\x2', '\xE4', '\xE5', '\x5', '$', 
		'\x13', '\x2', '\xE5', '\xE6', '\x5', '\x30', '\x19', '\x2', '\xE6', '\xF4', 
		'\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x5', '\x30', '\x19', '\x2', 
		'\xE8', '\xE9', '\x5', '&', '\x14', '\x2', '\xE9', '\xEA', '\x5', '\x30', 
		'\x19', '\x2', '\xEA', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xF0', 
		'\x5', '\x38', '\x1D', '\x2', '\xEC', '\xED', '\a', '\x1A', '\x2', '\x2', 
		'\xED', '\xEF', '\x5', '\x38', '\x1D', '\x2', '\xEE', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xF4', '/', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF8', '\x5', '\x32', '\x1A', '\x2', '\xF6', '\xF8', 
		'\x5', '\x34', '\x1B', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF7', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF8', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\xF9', '\xFB', '\t', '\x6', '\x2', '\x2', '\xFA', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFE', '\a', '-', 
		'\x2', '\x2', '\xFD', '\xFF', '\x5', '\x36', '\x1C', '\x2', '\xFE', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\xFF', '\x33', '\x3', '\x2', '\x2', '\x2', '\x100', '\x102', '\t', '\x6', 
		'\x2', '\x2', '\x101', '\x100', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x106', '\a', '-', '\x2', '\x2', '\x104', '\x105', '\a', '\x19', 
		'\x2', '\x2', '\x105', '\x107', '\a', '-', '\x2', '\x2', '\x106', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x35', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\t', '\a', 
		'\x2', '\x2', '\x109', '\x37', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', 
		'\a', '\x12', '\x2', '\x2', '\x10B', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'!', '>', '\x46', 'H', 'K', 'R', '[', 'm', 'v', '}', '\x85', '\x8E', '\x98', 
		'\x9C', '\xA6', '\xAC', '\xAF', '\xB4', '\xB7', '\xBA', '\xC1', '\xC4', 
		'\xC6', '\xCD', '\xDB', '\xF0', '\xF3', '\xF7', '\xFA', '\xFE', '\x101', 
		'\x106',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Pssa.BusinessRule.Parser
